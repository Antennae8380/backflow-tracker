// Project structure:
// 
// /package.json
// /next.config.js
// /prisma/schema.prisma
// /lib/prisma.js
// /lib/mail.js
// /pages/api/licenses.js
// /pages/api/devices.js
// /pages/api/renewals.js
// /pages/index.js
// /components/Dashboard.jsx
// /cron/alerts.js

/* package.json */
{
  "name": "backflow-tracker",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "cron": "node cron/alerts.js"
  },
  "dependencies": {
    "next": "latest",
    "react": "latest",
    "react-dom": "latest",
    "prisma": "^4.0.0",
    "@prisma/client": "^4.0.0",
    "nodemailer": "^6.0.0",
    "node-cron": "^3.0.0",
    "recharts": "^2.1.0",
    "tailwindcss": "latest"
  }
}

/* prisma/schema.prisma */
// Define Postgres datasource and simple models

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tester {
  id          Int      @id @default(autoincrement())
  name        String
  licenseExp  DateTime
  kits        TestKit[]
}

model TestKit {
  id            Int      @id @default(autoincrement())
  serial        String   @unique
  calibExp      DateTime
  tester        Tester   @relation(fields: [testerId], references: [id])
  testerId      Int
}

model Property {
  id            Int       @id @default(autoincrement())
  address       String    @unique
  devices       Device[]
}

model Device {
  id            Int       @id @default(autoincrement())
  serial        String    @unique
  lastTested    DateTime
  property      Property  @relation(fields: [propertyId], references: [id])
  propertyId    Int
}

/* lib/prisma.js */
import { PrismaClient } from '@prisma/client';
export const prisma = new PrismaClient();

/* lib/mail.js */
import nodemailer from 'nodemailer';

export const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: +process.env.SMTP_PORT,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

export async function sendAlert(to, subject, text) {
  await transporter.sendMail({
    from: process.env.SMTP_FROM,
    to,
    subject,
    text,
  });
}

/* pages/api/licenses.js */
import { prisma } from '../../lib/prisma';
export default async function handler(req, res) {
  const testers = await prisma.tester.findMany({ include: { kits: true } });
  res.json(testers);
}

/* pages/api/renewals.js */
import { prisma } from '../../lib/prisma';
export default async function handler(req, res) {
  const now = new Date();
  const upcoming = new Date();
  upcoming.setDate(now.getDate() + 30);

  const expiringKits = await prisma.testKit.findMany({ where: { calibExp: { lte: upcoming } } });
  const expiringLicenses = await prisma.tester.findMany({ where: { licenseExp: { lte: upcoming } } });

  res.json({ kits: expiringKits, licenses: expiringLicenses });
}

/* components/Dashboard.jsx */
import { useEffect, useState } from 'react';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

export function Dashboard() {
  const [data, setData] = useState([]);
  useEffect(() => {
    fetch('/api/renewals').then(r => r.json()).then(d => {
      // transform for graph
      const items = [
        { name: 'Kits', count: d.kits.length },
        { name: 'Licenses', count: d.licenses.length }
      ];
      setData(items);
    });
  }, []);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">Expiring Soon (next 30 days)</h2>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data}>
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="count" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

/* pages/index.js */
import { Dashboard } from '../components/Dashboard';

export default function Home() {
  return (
    <main className="container mx-auto p-8">
      <h1 className="text-3xl font-bold mb-6">Backflow Compliance Dashboard</h1>
      <Dashboard />
      {/* Additional UI: search box, tables, color-coded lists */}
    </main>
  );
}

/* cron/alerts.js */
import cron from 'node-cron';
import { prisma } from '../lib/prisma';
import { sendAlert } from '../lib/mail';

// run daily at 8am UTC
cron.schedule('0 8 * * *', async () => {
  const now = new Date();
  const upcoming = new Date(); upcoming.setDate(now.getDate() + 7);

  const items = await prisma.testKit.findMany({ where: { calibExp: { lte: upcoming } } });
  for (const kit of items) {
    await sendAlert('ops@company.com', 'Kit Expiring Soon', `Kit ${kit.serial} expires on ${kit.calibExp.toDateString()}`);
  }

  const testers = await prisma.tester.findMany({ where: { licenseExp: { lte: upcoming } } });
  for (const t of testers) {
    await sendAlert('ops@company.com', 'License Expiring Soon', `Tester ${t.name} license expires on ${t.licenseExp.toDateString()}`);
  }
});
